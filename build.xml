<project name="SampleService" default="build-service-jar" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">

    <property name="service.version" value="0.1" />
    <property name="service.name" value="sampleService" />
    <property name="service.package" value="i5.las2peer.service" />
    <property name="service.path" value="i5/las2peer/service" />

    <presetdef name="javac">
        <javac includeantruntime="false" />
    </presetdef>

    <property name="src.main" location="src/main" />
    <property name="src.junit" location="src/test" />

    <property name="tmp" location="tmp" />
    <property name="log" location="log" />
    <property name="service" location="service" />

    <property name="tmp.classes" location="${tmp}/classes" />
    <property name="tmp.junit" location="${tmp}/test" />

    <property name="junit.report" location="${tmp}/test_reports" />

    <property name="export" location="export" />
    <property name="export.doc" location="${export}/doc" />
    <property name="export.jars" location="${export}/jars" />

    <property name="lib" location="lib" />

    <path id="libraries">
        <fileset dir="${lib}">
            <include name="**/*.jar"/>
            <exclude name="junit-*.jar"/>
        </fileset>
    </path>

    <property name="lib.junit" location="${lib}/junit-4.11.jar" />


    <!-- Make sure Ivy is available -->

    <property name="ivy.install.version" value="2.3.0" />
    <property name="ivy.jar.dir" value="${basedir}/ivy" />
    <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />
    <property name="ivy.settings.file" value="${ivy.jar.dir}/ivysettings.xml" />
    <property name="ivy.dep.file" value="${ivy.jar.dir}/ivy.xml" />

    <target name="download-ivy" unless="skip.download">
        <mkdir dir="${ivy.jar.dir}"/>
        <!-- download Ivy from web site so that it can be used even without any special installation -->
        <echo message="installing ivy..."/>
        <get src="http://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar"
            dest="${ivy.jar.file}" usetimestamp="true" skipexisting="true"/>
    </target>

    <target name="install-ivy" depends="download-ivy" description="--> install ivy">
        <!-- try to load ivy here from local ivy dir, in case the user has not already dropped
              it into ant's lib dir (note that the latter copy will always take precedence).
              We will not fail as long as local lib dir exists (it may be empty) and
              ivy is in at least one of ant's lib dir or the local lib dir. -->
        <path id="ivy.lib.path">
            <fileset dir="${ivy.jar.dir}" includes="*.jar"/>
        </path>
        <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
    </target>

    <!-- Get dependencies from our Maven repo through Ivy -->

    <target name="get_deps" depends="install-ivy" description="--> resolve dependencies">
        <ivy:settings>
            <credentials host="role.dbis.rwth-aachen.de:9911/archiva"  realm="Repository internal"/>
        </ivy:settings>

        <ivy:retrieve type="jar" />
    </target>

    <target name="init_general">
        <tstamp/>
        <mkdir dir="${tmp}" />
        <mkdir dir="${export}" />
        <mkdir dir="${service}" />
    </target>

    <target name="init_compile" depends="init_general">
        <mkdir dir="${tmp.classes}" />
        <mkdir dir="${tmp.junit}" />
    </target>

    <target name="init_jars" depends="init_general">
        <mkdir dir="${export.jars}" />
    </target>

    <target name="init_doc" depends="init_general">
        <mkdir dir="${export.doc}" />
    </target>

    <!-- compilation -->
    <target name="compile_main" depends="get_deps, init_compile">
        <javac srcdir="${src.main}"
            destdir="${tmp.classes}"
            classpathref="libraries"
            source="1.7"
            target="1.7"
            debug="on"
            encoding="UTF-8"
            />
        <copy todir="${tmp.classes}">
            <fileset dir="${src.main}">
                <include name="**/*.xml" />
            </fileset>
        </copy>
    </target>

    <target name="compile_junit" depends="init_compile">
        <javac srcdir="${src.junit}"
            destdir="${tmp.junit}"
            classpath="${tmp.classes}:${lib.junit}"
            classpathref="libraries"
            source="1.7"
            target="1.7"
            debug="on"
            encoding="UTF-8"
            />
        <copy todir="${tmp.junit}">
            <fileset dir="${src.junit}">
                <include name="**/*.xml" />
            </fileset>
        </copy>
    </target>

    <target name="compile_all" depends="compile_main, compile_junit" />

    <target name="build-service-jar" depends="compile_main">
        <jar jarfile="${export.jars}/${service.package}.${service.name}-${service.version}.jar">
            <fileset dir="${tmp.classes}" includes="${service.path}/${service.name}/**" />
            <manifest>
                <attribute name="Library-Version" value="${service.version}" />
                <attribute name="Library-SymbolicName" value="${service.package}.${service.name}" />
            </manifest>
        </jar>
        <!-- Add the same Jar to the service directory !-->
        <jar jarfile="${service}/${service.package}.${service.name}-${service.version}.jar">
            <fileset dir="${tmp.classes}" includes="${service.path}/${service.name}/**" />
            <manifest>
                <attribute name="Library-Version" value="${service.version}" />
                <attribute name="Library-SymbolicName" value="${service.package}.${service.name}" />
            </manifest>
        </jar>
    </target>

    <target name="java_doc" depends="init_doc">
        <javadoc destdir="${export.doc}"
            author="true"
            version="true"
            use="true"
            source="1.7"
            windowtitle="Service Documentation"
            failonerror="yes"
            encoding="utf8"
            classpath="${tmp.classes}"
            classpathref="libraries"
            >
            <packageset dir="${src.main}" defaultexcludes="yes">
                <include name="/**" />
            </packageset>
        </javadoc>
    </target>

    <!-- JUNIT testing -->
    <target name="junit" depends="junit_tests, junit_clean" />

    <target name="init_junit" depends="init_general">
        <mkdir dir="${junit.report}" />
        <mkdir dir="log" />
    </target>

    <target name="junit_clean">
        <delete dir="${tmp.junit}" />
    </target>

    <target name="junit_tests" depends="init_junit, compile_all">
        <junit fork="yes" haltonerror="yes" haltonfailure="yes" printsummary="yes">
            <classpath>
                <pathelement path="${tmp.classes}" />
                <pathelement path="${tmp.junit}" />
                <pathelement path="${lib.junit}" />
                <path refid="libraries"/>
            </classpath>
            <formatter type="plain" />
            <batchtest fork="yes" todir="${junit.report}">
                <fileset dir="${tmp.junit}">
                    <include name="**/*Test.class"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

    <!-- general cleanup -->
    <target name="clean">
        <delete dir="${tmp}" />
        <delete dir="${log}" />
        <delete dir="${service}" />
        <delete dir="${export}" />
    </target>

    <target name="clean_deps">
        <delete dir="ivy" />
        <delete dir="lib" />
    </target>

    <target name="clean_all" depends="clean, clean_deps"/>

    <target name="all" depends="build-service-jar, junit, java_doc, clean" />

</project>
